Типы: 
NULL, INTEGER, REAL, TEXT, BLOB



CREATE TABLE users (name TEXT, sex INTEGER, old INTEGER, score INTEGER)
CREATE TABLE IF NOT EXIST users (name TEXT, sex INTEGER, old INTEGER, score INTEGER)

SELECT * FROM users
SELECT rowid, * FROM users

DROP TABLE users
DROP TABLE IF EXISTS users
CREATE TABLE IF NOT EXIST users (name TEXT NOT NULL, sex INTEGER DEFAULT 1, old INTEGER, score INTEGER)
CREATE TABLE IF NOT EXIST users (name TEXT NOT NULL, sex INTEGER NOT NULL DEFAULT 1, old INTEGER, score INTEGER)
CREATE TABLE IF NOT EXIST users (user_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, sex INTEGER NOT NULL DEFAULT 1, old INTEGER, score INTEGER)


INSERT INTO users VALUES ('Михаил', 1, 19, 1000)
INSERT INTO users (name, old, score) VALUES ('Федор', 32, 200)

SELECT name, old, score FROM users
SELECT * FROM users
SELECT * FROM users WHERE score < 1000

= == > < >= <= != BETWEEN


SELECT * FROM users WHERE score BETWEEN 500 AND 1000
SELECT * FROM users WHERE score == 200

AND OR IN NOT IN

SELECT * FROM users WHERE old > 20 AND score < 1000
SELECT * FROM users WHERE old IN(19, 32) AND score <= 1000 OR sex == 1
SELECT * FROM users WHERE old IN(19, 32) AND (score <= 1000 OR sex = 1)

SELECT * FROM users WHERE old IN(19, 32) AND score <= 1000 OR sex == 1 ORDER BY old
SELECT * FROM users WHERE old IN(19, 32) AND score <= 1000 OR sex == 1 ORDER BY old DESC
SELECT * FROM users WHERE old IN(19, 32) AND score <= 1000 OR sex == 1 ORDER BY old ASC

SELECT * FROM users WHERE score > 100 ORDER BY score DESC LIMIT 10
SELECT * FROM users WHERE score > 100 ORDER BY score DESC LIMIT 10 OFFSET 100
SELECT * FROM users WHERE score > 100 ORDER BY score DESC LIMIT 100, 10


UPDATE users SET score = 0
UPDATE users SET score = 1000 WHERE rowid = 1
UPDATE users SET score = score + 500 WHERE sex = 2
UPDATE users SET score = 300 WHERE name LIKE 'Федор'
UPDATE users SET score = 300 WHERE name LIKE 'Ф_д%'
UPDATE users SET score = 800, old = 45 WHERE old > 40

DELETE FROM users WHERE rowid IN(2, 5)

SELECT user_id FROM games WHERE user_id = 1
SELECT count(user_id) FROM games WHERE user_id = 1
SELECT count(score) FROM games WHERE user_id = 1
SELECT count(user_id) as count FROM games WHERE user_id = 1

агрегирующая функция выполняется в последнюю очередь, сначала отрабатывает SELECT
count(), sum(), avr(), min(), max()

SELECT count(DISTINCT user_id) as count FROM games
SELECT DISTINCT user_id as count FROM games
SELECT sum(score) as scores FROM games WHERE user_id = 1
SELECT min(score) as scores FROM games WHERE user_id = 1


SELECT user_id, sum(score) as score_sum
FROM games
GROUP BY user_id
ORDER BY score_sum DESC

SELECT user_id, sum(score) as score_sum
FROM games
WHERE score > 300	# выполняется до группировки
GROUP BY user_id
ORDER BY score_sum DESC
LIMIT 10



games (user_id, score, time) users (rowid, name, sex, old, score)

SELECT name, sex, games.score FROM games
JOIN users ON games.user_id = users.rowid		# Inner join

SELECT name, sex, games.score FROM users, games	# вернет декартово произведение из строчек

SELECT name, sex, games.score FROM games
LEFT JOIN users ON games.user_id = users.rowid		# строки games берутся даже если не найдено соответствие в users


SELECT name, sex, sum(games.score) as score_sum
FROM games JOIN users ON games.user_id = users.rowid
GROUP BY user_id
ORDER BY score_sum DESC



SELECT <поля> FROM <таблица 1>
JOIN <таблица 2> JOIN <таблица 3> ... JOIN <таблица N>
ON <условие связывания>




SELECT score, `from` FROM tab1			# `from` имя столбца
UNION SELECT val, type FROM tab2

SELECT score FROM tab1
UNION SELECT val FROM tab2			# объединение оставляет только уникальные записи


SELECT score, 'table 1' as tbl FROM tab1
UNION SELECT val, 'table 2' FROM tab2
ORDER BY score DESC


SELECT score, 'table 1' as tbl FROM tab1 WHERE score IN(300, 400)
UNION SELECT val, 'table 2' FROM tab2
ORDER BY score DESC
LIMIT 3



# вложенные запросы по отдельности
SELECT mark FROM marks
WHERE id = 2 AND subject LIKE 'Си'

SELECT name, subject, mark FROM marks
JOIN students ON students.rowid = marks.id
WHERE mark > 3 AND subject LIKE 'Си'

# совмещаем

SELECT name, subject, mark FROM marks
JOIN students ON students.rowid = marks.id
WHERE mark > (SELECT mark FROM marks
WHERE id = 2 AND subject LIKE 'Си')
AND subject LIKE 'Си'

SELECT name, subject, mark FROM marks
JOIN students ON students.rowid = marks.id
WHERE mark > (SELECT avg(mark) FROM marks WHERE id = 2)
AND subject LIKE 'Си'

INSERT INTO female
SELECT * FROM students WHERE sex = 2


# если выполняем второй раз нужно избавиться от неуникальных идентификаторов
INSERT INTO female
SELECT NULL, name, sex, old FROM students WHERE sex = 2



UPDATE marks SET mark = 0
WHERE mark <= (SELECT min(mark) FROM marks WHERE id = 1)

DELETE FROM students
WHERE old < (SELECT old FROM students WHERE id = 2)



-- из курса по MySQL
DESCRIBE students;
ALTER TABLE student ADD gpa DECIMAL(3, 2);
ALTER TABLE student DROP COLUMN gpa;


SQL (Structured Query Language) Relational Database Management Systems (RDBMS)
You can use SQL to get the RDBMS to do things for you
- create, retrieve, update and delete data
- create and manage databases
- design and create database tables
- perform administration tasks (security, user management, import/export, etc)

some specific with:
- foreign key is essential way to find relationships between the two tables
- composit key


SQL:
- Data query language (query information from db; _, R, _, _)
- Data definition language (define db schemas)
- Data control language (used for controlling access to the data in the db, user and permissions mngmt)
- Data manipulation language (C, _ , U, D)


------------------------------------------ practikum:
SELECT CAST(track_id AS varchar)
FROM track; 


SELECT total,
       customer_id
FROM invoice
WHERE billing_city IN ('Dublin',
                       'London',
                       'Paris',
                       'Boston',
                       'Berlin',
                       'Stuttgart'); 


SELECT last_name
FROM staff
WHERE birth_date BETWEEN '1970-01-01' AND '1970-12-31';


SELECT *
FROM playlist_track
WHERE CAST(track_id AS VARCHAR) LIKE '%43%'; 


SELECT CURRENT_DATE; 
SELECT CURRENT_TIME; 
SELECT CURRENT_TIMESTAMP; 


SELECT DATE_TRUNC('year', birth_date)
FROM staff
LIMIT 5; 
-- microseconds, milliseconds, second, minute, hour, day, week, month, quarter, year, decade, century

SELECT EXTRACT(YEAR FROM birth_date)
FROM staff
LIMIT 5;
-- CENTURY, DAY, DOY (day of the year), DOW (day of the week), ISODOW, HOUR, MILLISECOND, MINUTE, MONTH, SECOND, QUARTER, WEEK, YEAR


SELECT email,
       fax
FROM client
WHERE fax IS NULL
LIMIT 5; 



SELECT total,
       CASE
           WHEN total < 5 THEN 'маленький'
           WHEN total >= 5 AND total < 10 THEN 'средний'
           WHEN total >= 10 THEN 'крупный'
       END
FROM invoice
LIMIT 10; 

SELECT total,
       CASE
           WHEN total >= 5 AND total < 10 THEN 'средний'
           WHEN total >= 10 THEN 'крупный'
           ELSE 'маленький'
       END
FROM invoice
LIMIT 10; 


SELECT invoice_line_id,
       invoice_id,
       invoice_line_id + invoice_id
FROM invoice_line
LIMIT 5; 


SELECT number,
       ABS(number)
FROM table_1; 


SELECT number,
       FLOOR(number)
FROM table_1; 


SELECT number,
       CEILING(number)
FROM table_1; 


SELECT number,
       ROUND(number)
FROM table_1; 

SELECT ROUND(21.5595743, 2);


SELECT number,
       POWER(number, 2)
FROM table_1; 


SELECT number,
       SQRT(ABS(number))
FROM table_1; 


-- TRUNC(42.4382, 2)

SELECT SUM(total),
       MIN(total),
       MAX(total),
       AVG(total),
       COUNT(total)
FROM invoice; 


SELECT ROUND(AVG(total), 2)
FROM invoice; 


-- так считают записи в таблице
SELECT COUNT(*)
FROM invoice; 


-- Такой запрос выведет первые пять уникальных значений в поле billing_country.
SELECT DISTINCT billing_country 
FROM invoice
LIMIT 5; 


-- нужно указать поля и необходимые вычисления
SELECT billing_city,
       ROUND(AVG(total))
FROM invoice -- не забыть таблицу
GROUP BY billing_city -- здесь указывают поле, по которому группируют данные
LIMIT 5; 


SELECT billing_city,
       SUM(total),
       COUNT(total),
       AVG(total)
FROM invoice
WHERE billing_country = 'USA'
GROUP BY billing_city
ORDER BY AVG(total); 
-- ASC, DESK


SELECT CAST(invoice_date AS date),
       billing_country,
       COUNT(total)
FROM invoice
GROUP BY CAST(invoice_date AS date),
         billing_country 
ORDER BY CAST(invoice_date AS date) DESC
LIMIT 10; 


SELECT customer_id,
       SUM(total)
FROM invoice
GROUP BY customer_id
HAVING SUM(total) > 41 AND AVG(total) > 7
ORDER BY SUM(total) DESC; 

--к псевдонимам нельзя обратиться в WHERE или HAVING, потому что в SQL операторы выполняются не в том порядке, 
--в котором их указывают в запросе. Сначала данные отбираются по условию, а только потом полям назначаются псевдонимы.
--Во многих СУБД нельзя обращаться к псевдонимам и в GROUP BY, но в PostgreSQL можно. 

------------------------------------------ practikum:
-- как связаны таблицы:

SELECT EXTRACT(YEAR FROM CAST(i.invoice_date AS DATE)) AS year_of_purchase,
       MIN(i.total) AS min_cost,
       MAX(i.total) AS max_cost,
       SUM(i.total) AS total_revenue,
       COUNT(i.total) AS total_purchases,
       ROUND(SUM(i.total)/COUNT(DISTINCT(i.customer_id))) AS average_receipt
FROM invoice AS i
WHERE billing_country IN ('USA', 'United Kingdom', 'Germany')
GROUP BY year_of_purchase
ORDER BY year_of_purchase DESC; 


SELECT c.first_name,
       c.last_name,
       MIN(i.total) AS min_cost,
       MAX(i.total) AS max_cost,
       ROUND(AVG(i.total), 2) AS average_cost,
       COUNT(i.total) AS total_purchases
FROM invoice AS i
INNER JOIN client AS c ON i.customer_id = c.customer_id
WHERE i.billing_country = 'USA'
GROUP BY first_name, last_name
ORDER BY average_cost DESC
LIMIT 10; 


SELECT 
    p.name as playlist_name,
    SUM(t.unit_price*i.quantity) AS total_revenue
FROM track AS t
INNER JOIN invoice_line AS i ON t.track_id=i.track_id
INNER JOIN playlist_track AS pl ON t.track_id=pl.track_id
INNER JOIN playlist AS p ON pl.playlist_id = p.playlist_id
GROUP BY playlist_name
ORDER BY total_revenue DESC;


SELECT 
    c.name
FROM category AS c
INNER JOIN film_category AS fc ON c.category_id=fc.category_id
INNER JOIN film_actor AS fa ON fc.film_id=fa.film_id
INNER JOIN actor AS a ON a.actor_id=fa.actor_id
WHERE a.first_name='Emily' AND a.last_name='Dee'
GROUP BY c.name;


SELECT 
    c.name
FROM (SELECT * FROM actor WHERE first_name='Emily' AND last_name='Dee') AS a
INNER JOIN film_actor AS fa ON a.actor_id=fa.actor_id
INNER JOIN film_category AS fc ON fc.film_id=fa.film_id
INNER JOIN category AS c ON c.category_id=fc.category_id
GROUP BY c.name;


SELECT a.actor_id,
       a.first_name,
       a.last_name,
       c.first_name,
       c.last_name
FROM actor AS a
FULL OUTER JOIN client AS c ON a.last_name = c.last_name
LIMIT 10; 



-- конкатенация таблиц с помощью UNION:
----------------------------------------------------
SELECT i.billing_country,
       COUNT(i.total) AS total_purchases
FROM invoice AS i
WHERE i.billing_country IN ('USA',
                            'Germany',
                            'Brazil')
  AND EXTRACT(YEAR
              FROM cast(invoice_date AS date)) = 2009
GROUP BY i.billing_country
UNION
SELECT i.billing_country,
       COUNT(i.total) AS total_purchases
FROM invoice AS i
WHERE i.billing_country IN ('USA',
                            'Germany',
                            'Brazil')
  AND EXTRACT(YEAR
              FROM cast(invoice_date AS date)) = 2013
GROUP BY i.billing_country; 
----------------------------------------------------
-- абсолютные дубликаты при этом уникализируются, если нам не нужно уникализировать используем UNION ALL



SELECT
    billing_country,
    MIN(total) AS min_total,
    MAX(total) AS max_total,
    AVG(total) AS avg_total
FROM invoice
WHERE invoice.invoice_id IN (SELECT invoice_id
                                FROM invoice_line
                                GROUP BY invoice_id
                                HAVING SUM(quantity)>5)
    AND invoice.total>(SELECT AVG(unit_price) FROM invoice_line)
GROUP BY billing_country
ORDER BY avg_total DESC;







---------------------------- some tasks:
SELECT DISTINCT film_id
FROM film_actor
WHERE actor_id IN (SELECT actor_id
                   FROM film_actor
                   WHERE film_id IN (SELECT film_id FROM movie WHERE release_year>2013)
                   GROUP BY actor_id
                   HAVING COUNT(*)>7)
                                    
                                    
SELECT c.name as name_category,
       COUNT(t.film_id) as total_films
FROM (SELECT category_id, film_id
      FROM film_category
      WHERE film_id IN (1,2,3,4)) AS t
LEFT OUTER JOIN category AS c ON t.category_id = c.category_id
GROUP BY name_category
ORDER BY total_films DESC;



SELECT c.name as name_category,
       COUNT(t.film_id) as total_films
FROM 
    (SELECT category_id, film_id
      FROM film_category
      WHERE film_id IN (SELECT DISTINCT film_id
                        FROM film_actor
                        WHERE actor_id IN (SELECT actor_id
                                           FROM film_actor
                                           WHERE film_id IN (SELECT film_id FROM movie WHERE release_year>2013)
                                           GROUP BY actor_id
                                           HAVING COUNT(*)>7))
     ) AS t

LEFT OUTER JOIN category AS c ON t.category_id = c.category_id
GROUP BY name_category
ORDER BY total_films DESC, name_category ASC; 




SELECT ni.country, ni.total_invoice, nc.total_customers
FROM (
        SELECT billing_country AS country,
               COUNT(invoice_id) AS total_invoice
        FROM invoice
        WHERE EXTRACT(YEAR FROM CAST(invoice_date AS timestamp)) = (
                            SELECT y.year
                            FROM (SELECT 
                                        EXTRACT(YEAR FROM CAST(invoice_date AS timestamp)) AS year,
                                        SUM (total) as total_sum
                                    FROM invoice
                                    WHERE EXTRACT(MONTH FROM CAST(invoice_date AS timestamp)) IN (6,7,8)
                                    GROUP BY year
                                    ORDER BY total_sum DESC
                                    LIMIT 1) AS y
        )
        GROUP BY country
) AS ni
LEFT JOIN (
        SELECT country, 
               COUNT(customer_id) as total_customers 
        FROM client 
        GROUP BY country
) AS nc 
ON nc.country=ni.country
ORDER BY total_invoice DESC, country;


WITH
-- назначение псевдонимов и формирование подзапросов
псевдоним_1 AS (подзапрос_1),
псевдоним_2 AS (подзапрос_2),
псевдоним_3 AS (подзапрос_3),
....
псевдоним_n AS (подзапрос_n)

SELECT -- основной запрос
-- внутри основного запроса работают с псевдонимами, которые назначили в WITH
FROM псевдоним_1 INNER JOIN псевдоним_2 ... 
...
... 


WITH
t AS (SELECT 
            EXTRACT(YEAR FROM CAST(invoice_date AS timestamp)) AS year,
            EXTRACT(MONTH FROM CAST(invoice_date AS timestamp)) AS month,
            COUNT(*)
        FROM invoice
        GROUP BY year, month),
t11 AS (SELECT month, count as year_2011 FROM t WHERE year=2011),
t12 AS (SELECT month, count as year_2012 FROM t WHERE year=2012),
t13 AS (SELECT month, count as year_2013 FROM t WHERE year=2013)

SELECT DISTINCT t.month as invoice_month, 
                t11.year_2011, t12.year_2012, t13.year_2013
FROM t
LEFT JOIN t11 ON t11.month=t.month
LEFT JOIN t12 ON t12.month=t.month
LEFT JOIN t13 ON t13.month=t.month
ORDER BY invoice_month;

-------------------------------------------------------------------
Запросы выполняются в таком порядке:
1. Сначала нужно определить, откуда брать данные, поэтому первым идёт оператор FROM. На этом же этапе объединяются таблицы операторами JOIN и назначаются для них псевдонимы. Важно учесть, что присоединение предшествует фильтрации и группировке. Это означает, что большие таблицы будут объединяться очень долго. В этом случае выручат временные таблицы.

2. Данные выбраны, и наступает очередь оператора WHERE. Остаются только те данные, которые соответствуют условиям.

3. После срезов выполняется группировка оператором GROUP BY и подсчёт данных агрегирующими функциями. Обратите внимание, что WHERE предшествует GROUP BY, и это не позволяет сделать срез по группам. В момент получения среза группировка ещё не произошла.

4. Теперь наступает очередь HAVING — отбираются уже сгруппированные данные.

5. Только на этом этапе происходит выбор данных с помощью оператора SELECT, а полям в итоговой таблице присваиваются псевдонимы. По этой причине псевдонимы нельзя использовать после WHERE и HAVING — они ещё не назначены. В некоторых СУБД псевдонимы нельзя использовать и после GROUP BY. В PostgreSQL есть расширение, которое устраняет эту проблему.

6. После SELECT срабатывает ключевое слово DISTINCT, которое отбирает уникальные значения.

7. Нужные данные отобраны, и происходит сортировка. Оператор ORDER BY действует предпоследним.
8. Замыкающим будет оператор LIMIT.

