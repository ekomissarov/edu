from time import time
from time import sleep


def gen(s):
    for i in s:
        yield i


g = gen("eugene")
print(next(g))
print(next(g))
print(next(g))
print("QQ")  # можно поставить выполнение функции генератора на паузу
print(next(g))  # и потом продолжить ее выполнение с того же самого места
# выполняется пока генератор не разрядится до StopIteration
# функция генератор отдает не только свое сгенерированное значение, но и контроль выполнения программы
# генераторы обладают двумя ключевыми сво-ми:
# - генерация данных
# - передача контроля выполнения (можно ставить это свойство во главу угла)
# - yield разбивает выполнение функции на "до" и "после", yield'ов в функции может быть несколько

# мы можем написать генератор работающий бесконечно, и при этом, по прежнему,
# будет передавать контроль управления в то место откуда мы вызвали функцию next()
# не прерывая при этом работу нашей бесконечной функции генератора


def gen_filename():
    while True:
        pattern = "file-{}.jpeg"
        t = int(time() * 1000)
        print("\t\tBefore yield")
        yield pattern.format(t)
        print("\t\tAfter yield")


g = gen_filename()
print(next(g))
print(next(g))
sleep(1)
print(next(g))
