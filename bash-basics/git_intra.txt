Ссылки на источники: https://proglib.io/p/git-for-half-an-hour/
https://maryrosecook.com/blog/post/git-from-the-inside-out
https://www.youtube.com/watch?v=uYHUMBmr0kA&list=PL6kSdcHYB3x7PlJv2YoNlx2l1kINq7Uws
https://git-scm.com/book/en/v2

--------------------------Установка:
sudo apt-get install git

Базовая настройка:
git config --global user.name "My Name"
git config --global user.email myEmail@example.com
Теперь каждое наше действие будет отмечено именем и почтой.

--------------------------Создание нового репозитория:

git хранит свои файлы и историю прямо в папке проекта
mkdir Desktop/git_exercise/
cd Desktop/git_exercise/
git init

echo "hallo git!" >hello.txt

$ git status
On branch master
Initial commit
Untracked files:
(use "git add ..." to include in what will be committed)
hello.txt

Сообщение говорит о том, что файл hello.txt неотслеживаемый. 
Это значит, что файл новый и система еще не знает, нужно ли следить за изменениями 
в файле или его можно просто игнорировать. Для того, чтобы начать отслеживать новый файл,
нужно его специальным образом объявить.

--------------------------Подготовка файлов:
git add hello.txt

Если нам нужно добавить все, что находится в директории, мы можем использовать
$ git add -A

$ git status
On branch master
Initial commit
Changes to be committed:
(use "git rm --cached ..." to unstage)
new file: hello.txt

Файл готов к коммиту.

--------------------------Коммит(фиксация изменений):
Коммит представляет собой состояние репозитория в определенный момент времени.
Это похоже на снапшот, к которому мы можем вернуться и увидеть состояние объектов на определенный момент времени.

$ git commit -m "Initial commit."


--------------------------Удаленные репозитории:
Сейчас наш коммит является локальным — существует только в директории .git на нашей файловой системе.
1. Подключение к удаленному репозиторию

нужно обязательно изменить URI репозитория на свой
# This is only an example. Replace the URI with your own repository address.
$ git remote add origin https://github.com/tutorialzine/awesome-project.git

Проект может иметь несколько удаленных репозиториев одновременно. Чтобы их различать, мы дадим им разные имена. 
Обычно главный репозиторий называется origin.

2. Отправка изменений на сервер
$ git push origin master
Counting objects: 3, done.
Writing objects: 100% (3/3), 212 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/tutorialzine/awesome-project.git
* [new branch] master -> master

3. Клонирование репозитория
Сейчас другие пользователи GitHub могут просматривать ваш репозиторий. 
Они могут скачать из него данные и получить полностью работоспособную копию вашего проекта при помощи команды clone.

$ git clone https://github.com/tutorialzine/awesome-project.git

Новый локальный репозиторий создается автоматически с GitHub в качестве удаленного репозитория.

4. Запрос изменений с сервера
Если вы сделали изменения в вашем репозитории, другие пользователи могут скачать изменения при помощи команды pull.
$ git pull origin master
From https://github.com/tutorialzine/awesome-project
* branch master -> FETCH_HEAD
Already up-to-date.

(это составная операция:
забрать все объекты git fetch
сделать git merge)


--------------------------Ветвление:
о время разработки новой функциональности считается хорошей практикой работать с копией оригинального проекта, 
которую называют веткой. Ветви имеют свою собственную историю и изолированные друг от друга изменения до тех пор, 
пока вы не решаете слить изменения вместе. Это происходит по набору причин:

- Уже рабочая, стабильная версия кода сохраняется.
- Различные новые функции могут разрабатываться параллельно разными программистами.
- Разработчики могут работать с собственными ветками без риска, что кодовая база поменяется из-за чужих изменений.
- В случае сомнений, различные реализации одной и той же идеи могут быть разработаны в разных ветках и затем сравниваться.

1. Создание новой ветки
$ git branch amazing_new_feature
Это создаст новую ветку, пока что точную копию ветки master.

2. Переключение между ветками
$ git branch
amazing_new_feature
* master

$ git checkout amazing_new_feature

3. Слияние веток
Наша “потрясающая новая фича” будет еще одним текстовым файлом под названием feature.txt. 
Мы создадим его, добавим и закоммитим:

$ git add feature.txt
$ git commit -m "New feature complete.”

Изменения завершены, теперь мы можем переключиться обратно на ветку master.
$ git checkout master

Теперь, если мы откроем наш проект в файловом менеджере, мы не увидим файла feature.txt, 
потому что мы переключились обратно на ветку master, в которой такого файла не существует. 
Чтобы он появился, нужно воспользоваться merge для объединения веток 
(применения изменений из ветки amazing_new_feature к основной версии проекта).
$ git merge amazing_new_feature

Теперь ветка master актуальна. Ветка amazing_new_feature больше не нужна, и ее можно удалить.
$ git branch -d awesome_new_feature

--------------------------Дополнительно:

1. Отслеживание изменений, сделанных в коммитах
У каждого коммита есть свой уникальный идентификатор в виде строки цифр и букв. 
Чтобы просмотреть список всех коммитов и их идентификаторов, можно использовать команду log:

$ git log
commit ba25c0ff30e1b2f0259157b42b9f8f5d174d80d7
Author: Tutorialzine
Date: Mon May 30 17:15:28 2016 +0300
New feature complete
commit b10cc1238e355c02a044ef9f9860811ff605c9b4
Author: Tutorialzine
Date: Mon May 30 16:30:04 2016 +0300
Added content to hello.txt
commit 09bd8cc171d7084e78e4d118a2346b7487dca059
Author: Tutorialzine
Date: Sat May 28 17:52:14 2016 +0300
Initial commit

Как вы можете заметить, идентификаторы довольно длинные, но для работы с ними 
не обязательно копировать их целиком — первых нескольких символов будет вполне достаточно. 
Чтобы посмотреть, что нового появилось в коммите, мы можем воспользоваться командой show 

$ git show b10cc123
commit b10cc1238e355c02a044ef9f9860811ff605c9b4
Author: Tutorialzine
Date: Mon May 30 16:30:04 2016 +0300
Added content to hello.txt
diff --git a/hello.txt b/hello.txt
index e69de29..b546a21 100644
--- a/hello.txt
+++ b/hello.txt
@@ -0,0 +1 @@
+Nice weather today, isn't it?

Чтобы увидеть разницу между двумя коммитами, используется команда diff (с указанием промежутка между коммитами):
$ git diff 09bd8cc..ba25c0ff
diff --git a/feature.txt b/feature.txt
new file mode 100644
index 0000000..e69de29
diff --git a/hello.txt b/hello.txt
index e69de29..b546a21 100644
--- a/hello.txt
+++ b/hello.txt
@@ -0,0 +1 @@
+Nice weather today, isn't it?

Мы сравнили первый коммит с последним, чтобы увидеть все изменения, которые были когда-либо сделаны. 
Обычно проще использовать git difftool, так как эта команда запускает графический клиент, 
в котором наглядно сопоставляет все изменения.

2. Возвращение файла к предыдущему состоянию
$ git checkout 09bd8cc1 hello.txt

Гит позволяет вернуть выбранный файл к состоянию на момент определенного коммита. 
Это делается уже знакомой нам командой checkout, которую мы ранее использовали для переключения между ветками.
Но она также может быть использована для переключения между коммитами 
(это довольно распространенная ситуация для Гита - использование одной команды для различных, 
на первый взгляд, слабо связанных задач).
В следующем примере мы возьмем файл hello.txt и откатим все изменения, совершенные 
над ним к первому коммиту. Чтобы сделать это, мы подставим в команду идентификатор 
нужного коммита, а также путь до файла:

$ git checkout 09bd8cc1 hello.txt

3. Исправление коммита
Если вы опечатались в комментарии или забыли добавить файл и заметили это сразу после того, 
как закоммитили изменения, вы легко можете это поправить при помощи commit —amend. 

Эта команда добавит все из последнего коммита в область подготовленных файлов и попытается сделать новый коммит. 
Это дает вам возможность поправить комментарий или добавить недостающие файлы в область подготовленных файлов.
Для более сложных исправлений, например, не в последнем коммите или если вы успели отправить изменения на сервер, 
нужно использовать revert. Эта команда создаст коммит, отменяющий изменения, совершенные в коммите 
с заданным идентификатором.

Самый последний коммит может быть доступен по алиасу HEAD:
$ git revert HEAD

Для остальных будем использовать идентификаторы:
$ git revert b10cc123

При отмене старых коммитов нужно быть готовым к тому, что возникнут конфликты. 
Такое случается, если файл был изменен еще одним, более новым коммитом. 
И теперь git не может найти строчки, состояние которых нужно откатить, так как они больше не существуют.

4. Разрешение конфликтов при слиянии
Помимо сценария, описанного в предыдущем пункте, конфликты регулярно возникают при слиянии ветвей 
или при отправке чужого кода. Иногда конфликты исправляются автоматически, но обычно с этим приходится 
разбираться вручную — решать, какой код остается, а какой нужно удалить.

Давайте посмотрим на примеры, где мы попытаемся слить две ветки под названием john_branch и tim_branch. 
И Тим, и Джон правят один и тот же файл: функцию, которая отображает элементы массива.
Джон использует цикл:

// Use a for loop to console.log contents.
for(var i=0; i<arr.length; i++) {
console.log(arr[i]);
}

Тим предпочитает forEach:
// Use forEach to console.log contents.
arr.forEach(function(item) {
console.log(item);
});

Они оба коммитят свой код в соответствующую ветку. Теперь, если они попытаются слить две ветки, 
они получат сообщение об ошибке:

$ git merge tim_branch
Auto-merging print_array.js
CONFLICT (content): Merge conflict in print_array.js
Automatic merge failed; fix conflicts and then commit the result.

Система не смогла разрешить конфликт автоматически, значит, это придется сделать разработчикам. 
Приложение отметило строки, содержащие конфликт:

<<<<<<< HEAD // Use a for loop to console.log contents. for(var i=0; i<arr.length; i++) { console.log(arr[i]); } 
======= 
// Use forEach to console.log contents. arr.forEach(function(item) { console.log(item); }); >>>>>>> Tim's commit.

Над разделителем ======= мы видим последний (HEAD) коммит, а под ним - конфликтующий. 
Таким образом, мы можем увидеть, чем они отличаются и решать, какая версия лучше. 
Или вовсе написать новую. В этой ситуации мы так и поступим, перепишем все, удалив разделители, 
и дадим git понять, что закончили.

// Not using for loop or forEach.
// Use Array.toString() to console.log contents.
console.log(arr.toString());

Когда все готово, нужно закоммитить изменения, чтобы закончить процесс:
$ git add -A
$ git commit -m "Array printing conflict resolved."

Как вы можете заметить, процесс довольно утомительный и может быть очень сложным в больших проектах. 
Многие разработчики предпочитают использовать для разрешения конфликтов клиенты с графическим интерфейсом. 
(Для запуска нужно набрать git mergetool).

5. Настройка .gitignore
В большинстве проектов есть файлы или целые директории, в которые мы не хотим (и, скорее всего, не захотим) 
коммитить. Мы можем удостовериться, что они случайно не попадут в git add -A при помощи файла .gitignore

1) Создайте вручную файл под названием .gitignore и сохраните его в директорию проекта.
2) Внутри файла перечислите названия файлов/папок, которые нужно игнорировать, каждый с новой строки.
3) Файл .gitignore должен быть добавлен, закоммичен и отправлен на сервер, как любой другой файл в проекте.

Вот хорошие примеры файлов, которые нужно игнорировать:

Логи
Артефакты систем сборки
Папки node_modules в проектах node.js
Папки, созданные IDE, например, Netbeans или IntelliJ
Разнообразные заметки разработчика.
Файл .gitignore, исключающий все перечисленное выше, будет выглядеть так:

*.log
build/
node_modules/
.idea/
my_notes.txt
Символ слэша в конце некоторых линий означает директорию (и тот факт, что мы рекурсивно игнорируем все ее содержимое). Звездочка, как обычно, означает шаблон.



ДОПОЛНЕНИЯ:
---------------
git commit -a -m "однострочный комментарий"
-a добавляет все отслеживаемые файлы в комит

git remote -v

git log              - говорит что произошло в измененных файлах рабочей копии
git log -p           - покажет еще и патчи (как у git diff)

git branch           - посмотреть ветку
git branch -a        - посмотреть все ветки в т.ч. в удаленном репозитории

как синхронизировать:
1) создать еще одну ветку, в которую втащить нужные ветки и смержить их там
2) втащить в имеющуюся ветку и смержить тут

если не выгружались на сервер:
git reset <commit id> - позволяет откатиться на любое состояние репозитория, при этом рабочая копия остается
git reset --hard еще и восстанавливает состояние рабочей копии

без особых усилий (repack) из базы коммит не удалается и если по какой-то причине мы помним его commint id 
мы можем вернуться к нему даже если его не осталось ни в одном дереве

git branch new - создает новую ветку
git checkout new - переключились в ноыую ветку

git fetch origin <имя удаленной ветки> 
- где origin можно посмотреть здесь (git remote -v)
- <имя удаленной ветки> можно узнать git branch -a

fetch вытягивает ветку, но на первый взгляд как будто бы ничего не происходит. 
git branch не отображает новую ветку, но теперь с ней можно сделать merge
после merge можно посмотреть git log

bare репозиторий, репозиторий без рабоче копии файлов
git clone --bare myprojdir newprojbare
git clone newprojbare myproj
... вносим изменения в myproj
git commit -a -m "новые изменения в myproj"
git push
пушит изменения в bare репозиторий (cat mypoj/.git/config)

существуют ssh репозитории, вообще доступ к репозиторию git не обязательно по http, или по протоколу git


PULL REQUEST:
---------------
это запрос к владельцу удаленного репозитория чтобы он замержился с вами сделал pull из вашего репозитория.


