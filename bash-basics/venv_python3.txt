Источники:
https://docs.python.org/3/library/venv.html#module-venv
https://python-scripts.com/virtualenv

Каждый проект может иметь свои собственные зависимости, вне зависимости от того, какие зависимости у другого проекта.
import sys
print(sys.prefix)

import site
print(site.getsitepackages())

Если вы используете Python 3, у вас уже должен быть модуль venv, установленный в стандартной библиотеке.

Предположим, что вы пользуетесь последней версией инструмента venv, так как между ним и virtualenv 
существует несколько различий в отношении команд. По большому счету, это два весьма разных инструмента.

Начнем с создания нового каталога, с которым мы будем работать:
mkdir python-virtual-environments && cd python-virtual-environments

Создание новой виртуальной среды внутри каталога:
# Python 3
$ python3 -m venv env

По умолчанию, это не включает в себя ни один из существующих сторонних пакетов.

Начиная с Python 3.3 и 3.4, рекомендуемый способ создания виртуального пространства 
– это использование инструмента командной строки pyvenv, который также включен в инсталляцию вашего Python 3 
по умолчанию. Однако, в версии 3.6 и выше, вам нужен python3 -m venv.

Активируем виртуальную среду:
source env/bin/activate

Деактивируем:
(env) $ deactivate

Чтобы посмотреть какой питон исполььзуется:
$ which python
/usr/bin/python

Обратите внимание на разницу между первым путем в $PATH до и после активации:
$ echo $PATH
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:
 
$ source env/bin/activate
(env) $ echo $PATH
/Users/michaelherman/python-virtual-environments/env/bin:/usr/local/bin:/usr/bin:/b


ругие пакеты, связывающие Python, такие как Anaconda, также могут выполнять манипуляции с вашим путем, 
если вы активируете их. Просто имейте это ввиду на случай, если вы столкнетесь с проблемами, 
связанными с другими виртуальными средами. Проблема может возникнуть при активации нескольких сред одновременно.



Управление виртуальной средой при помощи virtualenvwrapper
Несмотря на то, что виртуальная среда определенно решает ряд проблем с управлением пакетами, она не идеальна. После создания нескольких виртуальных сред, вы обнаружите, что они создают некоторые проблемы сами по себе, большая часть которых вращается вокруг управления самими виртуальными средами. Чтобы помочь с этим, был создан инструмент virtualenvwrapper, который представляет собой набор оберточных скриптов вокруг основного инструмента virtualenv.

Самые полезные функции virtualenvwrapper:
Организация каждой виртуальной среды в одном расположении;
Предоставляются методы, которые помогут вам легко создавать, удалять и копировать виртуальную среду, а также,
Предоставляет одну команду для переключения между средами
Некоторые функции могут показаться узкими, или незначительными, вы быстро поймете, что они – это отличные инструменты для вашего рабочего ритма.

Перед началом, вы можете скачать обёртку при помощи pip:

$ pip install virtualenvwrapper

После завершения установки, нам нужно активировать его функции оболочки. Это можно сделать, запустив источник установленного скрипта virtualenvwrapper.sh. Кода вы в первый раз устанавливаете его при помощи pip, выдача установки укажет вам точное расположение virtualenvwrapper.sh. Впрочем, вы можете просто запустить команду:

$ which virtualenvwrapper.sh
/usr/local/bin/virtualenvwrapper.sh

Используя данный путь, добавьте следующие три строки в стартовый файл вшей оболочки. Если оболочку Bash, вы можете разместить эти строки и в файле ~/.bashrc file or ~/.profile. Для других оболочек, таких как zsh, csh или fish, вам может понадобиться определенные файлы запуска для этой оболочки. Главное, чтобы эти команды выполнялись при открытии новой оболочки или входе в неё.

export WORKON_HOME=$HOME/.virtualenvs   # optional
export PROJECT_HOME=$HOME/projects      # optional
source /usr/local/bin/virtualenvwrapper.sh

От нас не требуется определять переменные виртуальной среды WORKON_HOME и PROJECT_HOME. В virtualenvwrapper имеются установленные по умолчанию переменные для них, но вы можете перезаписать их, указав значения.

Наконец, перезагружаем файл запуска:
$ source ~/.bashrc

Теперь здесь должен быть каталог, расположенный в $WORKON_HOME, который содержит все данные и файлы virtualenvwrapper:

$ echo $WORKON_HOME
/Users/michaelherman/.virtualenvs

Кроме этого, у вас теперь в распоряжении имеются доступные команды оболочки, которые помогут в управлении виртуальной средой. Вот несколько из них:

workon
deactivate
mkvirtualenv
cdvirtualenv
rmvirtualenv
Для дополнительной информации о командах, установке и настройке virtualenvwrapper, вы можете ознакомиться с их документацией
https://virtualenvwrapper.readthedocs.io/en/latest/install.html

Теперь, когда бы вы не начинали новый проект, все что вам нужно, это:
$ mkvirtualenv my-new-project
(my-new-project) $
Это создаст и активирует новую виртуальную среду в каталоге, расположенном в $WORKON_HOME, где хранятся все среды virtualenvwrapper.

Чтобы прекратить использование этой среды, вам всего лишь нужно её деактивировать, как мы делали это раньше:

(my-new-project) $ deactivate
$

Если у вас есть широкий выбор виртуальных сред, вы можете отсортировать их по списку при помощи функции workon:

$ workon
my-new-project
my-django-project
web-scraper

И, наконец, активировать:

$ workon web-scraper
(web-scraper) $

